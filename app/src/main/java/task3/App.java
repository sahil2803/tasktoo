/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package task3;


import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;

public class App {
    public static void main(String[] args) {
        try {
            // Specify the path to the XML file
            String filePath = "data.xml";

            // Parse XML file
            File xmlFile = new File(filePath);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(xmlFile);
            doc.getDocumentElement().normalize();

            // Get list of all <record> elements
            NodeList nodeList = doc.getElementsByTagName("record");

            // Check if command-line arguments are provided
            if (args.length == 0) {
                System.out.println("No field numbers provided.");
                return;
            }

            // Display selected fields for each record
            for (int temp = 0; temp < nodeList.getLength(); temp++) {
                Node node = nodeList.item(temp);
                if (node.getNodeType() == Node.ELEMENT_NODE) {
                    Element element = (Element) node;
                    System.out.println("Record " + (temp + 1) + ":");
                    for (String fieldNumber : args) {
                        int field = Integer.parseInt(fieldNumber);
                        switch (field) {
                            case 1:
                                System.out.println("Name: " + element.getElementsByTagName("name").item(0).getTextContent());
                                break;
                            case 2:
                                System.out.println("Postal/Zip: " + element.getElementsByTagName("postalZip").item(0).getTextContent());
                                break;
                            case 3:
                                System.out.println("Region: " + element.getElementsByTagName("region").item(0).getTextContent());
                                break;
                            case 4:
                                System.out.println("Country: " + element.getElementsByTagName("country").item(0).getTextContent());
                                break;
                            case 5:
                                System.out.println("Address: " + element.getElementsByTagName("address").item(0).getTextContent());
                                break;
                            case 6:
                                System.out.println("List: " + element.getElementsByTagName("list").item(0).getTextContent());
                                break;
                            default:
                                System.out.println("Invalid field number: " + field);
                        }
                    }
                    System.out.println();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
